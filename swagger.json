{
  "openapi": "3.0.3",
  "info": {
    "title": "Inventory Management API",
    "description": "Multi-tenant inventory management system with items, locations, stock, and stock movements",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    }
  },
  "servers": [
    {
      "url": "https://mystra.dev.kynolabs.com/v1",
      "description": "Production server"
    },
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Health check endpoint",
        "description": "Returns the health status of the API",
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/inventory/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get all items",
        "description": "Retrieve all items for a specific tenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier",
            "example": "company123"
          }
        ],
        "responses": {
          "200": {
            "description": "List of items retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Create a new item",
        "description": "Create a new item for a specific tenant",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/inventory/items/{id}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get item by ID",
        "description": "Retrieve a specific item by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Item ID"
          },
          {
            "name": "tenantId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Item retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Items"
        ],
        "summary": "Update an item",
        "description": "Update an existing item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Item ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Items"
        ],
        "summary": "Delete an item",
        "description": "Delete an existing item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Item ID"
          },
          {
            "name": "tenantId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Item deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Item deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/inventory/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get all locations",
        "description": "Retrieve all locations for a specific tenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "List of locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "Create a new location",
        "description": "Create a new location for a specific tenant",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Location created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/inventory/locations/active": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get active locations",
        "description": "Retrieve all active locations for a specific tenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "List of active locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/inventory/locations/{id}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Get location by ID",
        "description": "Retrieve a specific location by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Location ID"
          },
          {
            "name": "tenantId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Location retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Location"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/inventory/stock/item/{itemId}": {
      "get": {
        "tags": [
          "Stock"
        ],
        "summary": "Get stock by item",
        "description": "Retrieve stock information for a specific item across all locations",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Item ID"
          },
          {
            "name": "tenantId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Stock information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Stock"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/inventory/stock/location/{locationId}": {
      "get": {
        "tags": [
          "Stock"
        ],
        "summary": "Get stock by location",
        "description": "Retrieve stock information for all items at a specific location",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Location ID"
          },
          {
            "name": "tenantId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Stock information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Stock"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/inventory/stock/item/{itemId}/location/{locationId}": {
      "get": {
        "tags": [
          "Stock"
        ],
        "summary": "Get stock by item and location",
        "description": "Retrieve stock information for a specific item at a specific location",
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Item ID"
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Location ID"
          },
          {
            "name": "tenantId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Stock information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stock"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/inventory/stock": {
      "put": {
        "tags": [
          "Stock"
        ],
        "summary": "Update stock",
        "description": "Update or create stock information for an item at a location",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStockRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Stock updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stock"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/inventory/stock-movements": {
      "get": {
        "tags": [
          "Stock Movements"
        ],
        "summary": "Get stock movements",
        "description": "Retrieve stock movements with optional filtering by item and location",
        "parameters": [
          {
            "name": "tenantId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Tenant identifier"
          },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter by item ID"
          },
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Filter by location ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Stock movements retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StockMovement"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Stock Movements"
        ],
        "summary": "Create stock movement",
        "description": "Create a new stock movement record",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStockMovementRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Stock movement created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockMovement"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the item"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant identifier"
          },
          "name": {
            "type": "string",
            "description": "Item name"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Item description"
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit"
          },
          "categoryId": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "Category ID"
          },
          "basePrice": {
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "description": "Base selling price"
          },
          "costPrice": {
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "description": "Cost price"
          },
          "taxRate": {
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "description": "Tax rate percentage"
          },
          "weight": {
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "description": "Item weight"
          },
          "minStockLevel": {
            "type": "integer",
            "nullable": true,
            "description": "Minimum stock level"
          },
          "maxStockLevel": {
            "type": "integer",
            "nullable": true,
            "description": "Maximum stock level"
          },
          "reorderPoint": {
            "type": "integer",
            "nullable": true,
            "description": "Reorder point"
          },
          "reorderQuantity": {
            "type": "integer",
            "nullable": true,
            "description": "Reorder quantity"
          },
          "leadTime": {
            "type": "integer",
            "nullable": true,
            "description": "Lead time in days"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the item is active"
          },
          "isPerishable": {
            "type": "boolean",
            "description": "Whether the item is perishable"
          },
          "customFields": {
            "type": "object",
            "nullable": true,
            "description": "Custom fields as JSON"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "CreateItemRequest": {
        "type": "object",
        "required": [
          "tenantId",
          "name",
          "sku"
        ],
        "properties": {
          "tenantId": {
            "type": "string",
            "description": "Tenant identifier"
          },
          "name": {
            "type": "string",
            "description": "Item name"
          },
          "description": {
            "type": "string",
            "description": "Item description"
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit"
          },
          "categoryId": {
            "type": "string",
            "format": "uuid",
            "description": "Category ID"
          },
          "basePrice": {
            "type": "number",
            "format": "decimal",
            "description": "Base selling price"
          },
          "costPrice": {
            "type": "number",
            "format": "decimal",
            "description": "Cost price"
          },
          "taxRate": {
            "type": "number",
            "format": "decimal",
            "description": "Tax rate percentage"
          },
          "weight": {
            "type": "number",
            "format": "decimal",
            "description": "Item weight"
          },
          "minStockLevel": {
            "type": "integer",
            "description": "Minimum stock level"
          },
          "maxStockLevel": {
            "type": "integer",
            "description": "Maximum stock level"
          },
          "reorderPoint": {
            "type": "integer",
            "description": "Reorder point"
          },
          "reorderQuantity": {
            "type": "integer",
            "description": "Reorder quantity"
          },
          "leadTime": {
            "type": "integer",
            "description": "Lead time in days"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the item is active"
          },
          "isPerishable": {
            "type": "boolean",
            "description": "Whether the item is perishable"
          },
          "customFields": {
            "type": "object",
            "description": "Custom fields as JSON"
          }
        }
      },
      "UpdateItemRequest": {
        "type": "object",
        "required": [
          "tenantId"
        ],
        "properties": {
          "tenantId": {
            "type": "string",
            "description": "Tenant identifier"
          },
          "name": {
            "type": "string",
            "description": "Item name"
          },
          "description": {
            "type": "string",
            "description": "Item description"
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit"
          },
          "categoryId": {
            "type": "string",
            "format": "uuid",
            "description": "Category ID"
          },
          "basePrice": {
            "type": "number",
            "format": "decimal",
            "description": "Base selling price"
          },
          "costPrice": {
            "type": "number",
            "format": "decimal",
            "description": "Cost price"
          },
          "taxRate": {
            "type": "number",
            "format": "decimal",
            "description": "Tax rate percentage"
          },
          "weight": {
            "type": "number",
            "format": "decimal",
            "description": "Item weight"
          },
          "minStockLevel": {
            "type": "integer",
            "description": "Minimum stock level"
          },
          "maxStockLevel": {
            "type": "integer",
            "description": "Maximum stock level"
          },
          "reorderPoint": {
            "type": "integer",
            "description": "Reorder point"
          },
          "reorderQuantity": {
            "type": "integer",
            "description": "Reorder quantity"
          },
          "leadTime": {
            "type": "integer",
            "description": "Lead time in days"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the item is active"
          },
          "isPerishable": {
            "type": "boolean",
            "description": "Whether the item is perishable"
          },
          "customFields": {
            "type": "object",
            "description": "Custom fields as JSON"
          }
        }
      },
      "Location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the location"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant identifier"
          },
          "locationCode": {
            "type": "string",
            "description": "Location code"
          },
          "locationName": {
            "type": "string",
            "description": "Location name"
          },
          "locationType": {
            "type": "string",
            "enum": [
              "WAREHOUSE",
              "BRANCH",
              "SERVICE_CENTER"
            ],
            "description": "Type of location"
          },
          "address": {
            "type": "string",
            "nullable": true,
            "description": "Location address"
          },
          "contactPerson": {
            "type": "string",
            "nullable": true,
            "description": "Contact person name"
          },
          "contactPhone": {
            "type": "string",
            "nullable": true,
            "description": "Contact phone number"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the location is active"
          },
          "customFields": {
            "type": "object",
            "nullable": true,
            "description": "Custom fields as JSON"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "CreateLocationRequest": {
        "type": "object",
        "required": [
          "tenantId",
          "locationCode",
          "locationName",
          "locationType"
        ],
        "properties": {
          "tenantId": {
            "type": "string",
            "description": "Tenant identifier"
          },
          "locationCode": {
            "type": "string",
            "description": "Location code"
          },
          "locationName": {
            "type": "string",
            "description": "Location name"
          },
          "locationType": {
            "type": "string",
            "enum": [
              "WAREHOUSE",
              "BRANCH",
              "SERVICE_CENTER"
            ],
            "description": "Type of location"
          },
          "address": {
            "type": "string",
            "description": "Location address"
          },
          "contactPerson": {
            "type": "string",
            "description": "Contact person name"
          },
          "contactPhone": {
            "type": "string",
            "description": "Contact phone number"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the location is active"
          },
          "customFields": {
            "type": "object",
            "description": "Custom fields as JSON"
          }
        }
      },
      "Stock": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the stock record"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant identifier"
          },
          "itemId": {
            "type": "string",
            "format": "uuid",
            "description": "Item ID"
          },
          "locationId": {
            "type": "string",
            "format": "uuid",
            "description": "Location ID"
          },
          "quantityOnHand": {
            "type": "integer",
            "description": "Quantity on hand"
          },
          "reservedQuantity": {
            "type": "integer",
            "description": "Reserved quantity"
          },
          "lastMovementAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Last movement timestamp"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "UpdateStockRequest": {
        "type": "object",
        "required": [
          "tenantId",
          "itemId",
          "locationId"
        ],
        "properties": {
          "tenantId": {
            "type": "string",
            "description": "Tenant identifier"
          },
          "itemId": {
            "type": "string",
            "format": "uuid",
            "description": "Item ID"
          },
          "locationId": {
            "type": "string",
            "format": "uuid",
            "description": "Location ID"
          },
          "quantityOnHand": {
            "type": "integer",
            "description": "Quantity on hand"
          },
          "reservedQuantity": {
            "type": "integer",
            "description": "Reserved quantity"
          },
          "lastMovementAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last movement timestamp"
          }
        }
      },
      "StockMovement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the stock movement"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant identifier"
          },
          "itemId": {
            "type": "string",
            "format": "uuid",
            "description": "Item ID"
          },
          "locationId": {
            "type": "string",
            "format": "uuid",
            "description": "Location ID"
          },
          "movementType": {
            "type": "string",
            "enum": [
              "IN",
              "OUT",
              "TRANSFER_IN",
              "TRANSFER_OUT",
              "ADJUSTMENT"
            ],
            "description": "Type of movement"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity moved (can be negative for OUT movements)"
          },
          "referenceType": {
            "type": "string",
            "enum": [
              "PURCHASE",
              "SALE",
              "SERVICE",
              "ADJUSTMENT",
              "TRANSFER"
            ],
            "nullable": true,
            "description": "Reference type"
          },
          "referenceId": {
            "type": "string",
            "nullable": true,
            "description": "Reference ID"
          },
          "unitCost": {
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "description": "Unit cost"
          },
          "totalCost": {
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "description": "Total cost"
          },
          "balanceAfter": {
            "type": "integer",
            "nullable": true,
            "description": "Stock balance after movement"
          },
          "notes": {
            "type": "string",
            "nullable": true,
            "description": "Movement notes"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who created the movement"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          }
        }
      },
      "CreateStockMovementRequest": {
        "type": "object",
        "required": [
          "tenantId",
          "itemId",
          "locationId",
          "movementType",
          "quantity",
          "createdBy"
        ],
        "properties": {
          "tenantId": {
            "type": "string",
            "description": "Tenant identifier"
          },
          "itemId": {
            "type": "string",
            "format": "uuid",
            "description": "Item ID"
          },
          "locationId": {
            "type": "string",
            "format": "uuid",
            "description": "Location ID"
          },
          "movementType": {
            "type": "string",
            "enum": [
              "IN",
              "OUT",
              "TRANSFER_IN",
              "TRANSFER_OUT",
              "ADJUSTMENT"
            ],
            "description": "Type of movement"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity moved (can be negative for OUT movements)"
          },
          "referenceType": {
            "type": "string",
            "enum": [
              "PURCHASE",
              "SALE",
              "SERVICE",
              "ADJUSTMENT",
              "TRANSFER"
            ],
            "description": "Reference type"
          },
          "referenceId": {
            "type": "string",
            "description": "Reference ID"
          },
          "unitCost": {
            "type": "number",
            "format": "decimal",
            "description": "Unit cost"
          },
          "totalCost": {
            "type": "number",
            "format": "decimal",
            "description": "Total cost"
          },
          "balanceAfter": {
            "type": "integer",
            "description": "Stock balance after movement"
          },
          "notes": {
            "type": "string",
            "description": "Movement notes"
          },
          "createdBy": {
            "type": "string",
            "format": "uuid",
            "description": "User ID who created the movement"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "error": {
            "type": "string",
            "description": "Detailed error information"
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "tenantId query parameter is required"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Item not found"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Failed to fetch items",
              "error": "Database connection error"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Health",
      "description": "Health check endpoints"
    },
    {
      "name": "Items",
      "description": "Item management operations"
    },
    {
      "name": "Locations",
      "description": "Location management operations"
    },
    {
      "name": "Stock",
      "description": "Stock management operations"
    },
    {
      "name": "Stock Movements",
      "description": "Stock movement tracking operations"
    }
  ]
}
